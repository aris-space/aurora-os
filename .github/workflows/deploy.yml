permissions:
  contents: read
on:
  push:
    branches: [main]
    pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: deploy
jobs:
  build_and_deploy:
    runs-on: self-hosted
    name: ubuntu build
    container:
      image: ubuntu
      options: 
        cpus: 10

    steps:
      - name: Install Git
        run: |
          apt-get update
          apt-get upgrade -y
          apt-get install -y git-core

      - uses: actions/checkout@main
        with: 
          submodules: true
      - name: Checkout repo
        run: |
          ls -lah
          apt-get install -y repo
          chmod +x scripts/fetch_distribution_package.sh
          ./scripts/fetch_distribution_package.sh

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y gawk wget git-core diffstat unzip texinfo \
                        gcc-multilib build-essential chrpath socat cpio \
                        python3 python3-pip python3-pexpect \
                        xz-utils debianutils iputils-ping python3-git \
                        python3-jinja2 libegl1-mesa libsdl1.2-dev xterm \
                        locales python3-distutils libssl-dev gdisk sudo \
                        libgmp-dev libmpc-dev pylint file zstd lz4 vim bsdmainutils
          

      #- name: Build the docker image
        #run: |
          #chmod +x scripts/build_docker.sh
          #./scripts/build_docker.sh
          #systemctl start docker
          #echo "old container removed"
          #docker ps -a
          #docker images
          #docker run -i -d -P --name yocto -v ./data/:/data ubuntu-yocto
          #echo "running container in detached state"
          #docker ps
          #chmod -R 777 data
          #ls -lah
          #docker exec -i yocto bash -c "cd /data && ls -lah && source scripts/setup_env.sh && bitbake aurora-image-core && bitbake -c populate_sdk aurora-image-core"
      
      - name: Run the Yocto build
        run: |
          cd data
          ls -lah
          source scripts/setup_env.sh
          bitbake aurora-image-core
          bitbake -c populate_sdk aurora-image-core

      #- name: Run the Yocto build in the docker container and create the SDK
      #  run: |
      
      #    sudo chmod +x scripts/start_docker.sh
      #    sudo ./scripts/start_docker.sh
      #    cd data
      #    source scripts/setup_env.sh
      #    bitbake aurora-image-core
      #    bitbake -c populate_sdk aurora-image-core

      - name: Create the SD card image
        run: |
          cd openstlinux-kirkstone/build-openstlinuxweston-stm32mp1/tmp-glibc/deploy/images/stm32mp1/scripts
          ./create_sdcard_from_flashlayout.sh ../flashlayout_aurora-image-core/extensible/FlashLayout_sdcard_stm32mp157c-dk2-extensible.tsv

      - name: Save the SD card image as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: sd_card_image
          path: data/openstlinux-kirkstone/build-openstlinuxweston-stm32mp1/tmp-glibc/deploy/images/stm32mp1/FlashLayout_sdcard_stm32mp157c-dk2-extensible.raw

      - name: Save the SDK as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdk
          path: data/openstlinux-kirkstone/build-openstlinuxweston-stm32mp1/tmp-glibc/deploy/sdk/


